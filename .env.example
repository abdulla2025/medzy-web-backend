# bKash Payment Gateway Configuration (Official Library)

# Sandbox Environment
BKASH_BASE_URL=https://tokenized.sandbox.bka.sh/v1.2.0-beta
BKASH_APP_KEY=4f6o0cjiki2rfm34kfdadl1eqq
BKASH_APP_SECRET=2is7hdktrekvrbljjh44ll3d9l1dtjo4pasmjvs5vl5qr3fug4b
BKASH_USERNAME=sandboxTokenizedUser02
BKASH_PASSWORD=sandboxTokenizedUser02@12345
BKASH_WEBHOOK_SECRET=your_webhook_secret_here

# Production Environment (replace with actual values when going live)
# BKASH_BASE_URL=https://tokenized.pay.bka.sh/v1.2.0-beta
# BKASH_APP_KEY=your_production_app_key
# BKASH_APP_SECRET=your_production_app_secret
# BKASH_USERNAME=your_production_username
# BKASH_PASSWORD=your_production_password
# BKASH_WEBHOOK_SECRET=your_production_webhook_secret

# Application URLs
FRONTEND_URL=http://localhost:5173
# For production, use your actual domain: https://yourdomain.com
BACKEND_URL=http://localhost:5000
# For production, use your actual API domain: https://api.yourdomain.com

# Stripe Payment Gateway Configuration
STRIPE_PUBLISHABLE_KEY=pk_test_dummy_key_for_testing
STRIPE_SECRET_KEY=sk_test_dummy_key_for_testing
STRIPE_WEBHOOK_SECRET=whsec_dummy_key_for_testing

# SSLCommerz Payment Gateway Configuration
# Get credentials from: https://developer.sslcommerz.com/registration/
# For sandbox testing:
SSLCOMMERZ_STORE_ID=testbox
SSLCOMMERZ_STORE_PASSWORD=qwerty
SSLCOMMERZ_IS_LIVE=false

# For production:
# SSLCOMMERZ_STORE_ID=your_store_id
# SSLCOMMERZ_STORE_PASSWORD=your_store_password
# SSLCOMMERZ_IS_LIVE=true

# Demo Payment Gateway Configuration
NAGAD_MERCHANT_ID=demo_merchant_id
ROCKET_MERCHANT_ID=demo_merchant_id

# Note: This project uses the official 'bkash-payment-gateway' npm library
# Install with: npm install bkash-payment-gateway
# Documentation: https://github.com/pxr687/bkash-payment-gateway

# Never commit actual production credentials to version control
